{"ast":null,"code":"var _jsxFileName = \"D:\\\\Work\\\\TherapyPlatformSravya\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ProtectedRoute({\n  children,\n  allowedRoles\n}) {\n  _s();\n  const token = localStorage.getItem('token');\n  const location = useLocation();\n  if (!token) {\n    // Not logged in\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n  let payload;\n  try {\n    payload = JSON.parse(atob(token.split('.')[1]));\n  } catch (e) {\n    // Invalid token\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n  const userRole = payload.sub.role;\n  if (!allowedRoles.includes(userRole)) {\n    // Wrong role\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n  return children;\n}\n_s(ProtectedRoute, \"pkHmaVRPskBaU4tMJuJJpV42k1I=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","_s","token","localStorage","getItem","location","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","payload","JSON","parse","atob","split","e","userRole","sub","role","includes","_c","$RefreshReg$"],"sources":["D:/Work/TherapyPlatformSravya/frontend/src/components/ProtectedRoute.js"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\nexport default function ProtectedRoute({ children, allowedRoles }) {\r\n  const token = localStorage.getItem('token');\r\n  const location = useLocation();\r\n\r\n  if (!token) {\r\n    // Not logged in\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  let payload;\r\n  try {\r\n    payload = JSON.parse(atob(token.split('.')[1]));\r\n  } catch (e) {\r\n    // Invalid token\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  const userRole = payload.sub.role;\r\n  if (!allowedRoles.includes(userRole)) {\r\n    // Wrong role\r\n    return <Navigate to=\"/login\" replace />;\r\n  }\r\n\r\n  return children;\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,eAAe,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACjE,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,IAAI,CAACO,KAAK,EAAE;IACV;IACA,oBAAOL,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEH;MAAS,CAAE;MAACI,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;EAEA,IAAIC,OAAO;EACX,IAAI;IACFA,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACf,KAAK,CAACgB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACA,oBAAOtB,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEH;MAAS,CAAE;MAACI,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;EAEA,MAAMO,QAAQ,GAAGN,OAAO,CAACO,GAAG,CAACC,IAAI;EACjC,IAAI,CAACtB,YAAY,CAACuB,QAAQ,CAACH,QAAQ,CAAC,EAAE;IACpC;IACA,oBAAOvB,OAAA,CAACH,QAAQ;MAACY,EAAE,EAAC,QAAQ;MAACG,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;EAEA,OAAOd,QAAQ;AACjB;AAACE,EAAA,CAxBuBH,cAAc;EAAA,QAEnBH,WAAW;AAAA;AAAA6B,EAAA,GAFN1B,cAAc;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}